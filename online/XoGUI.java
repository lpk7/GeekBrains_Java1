package ru.geekbrains.java_one.lesson_g.online;

public class XoGUI {
    public static void main(String[] args) {
        new GameWindow();
    }
}
/*
* 1. На что обратить внимание при подготовке к Java. Уровень_2? Какие темы изучить, чтобы потом было проще.
2. Насколько важен английский язык в работе программиста? Какой уровень владения должен быть?

По материалу:
1. Чем на практике помогает правило максимальной приватности всего?
2. Работа с исключениями применительна только для стримов? Или можно(нужно?) вообще для всего предусмотреть исключения?
3. Насколько страшны Spring\GWT и бесконечные прочие?

Экстра вопросы для тестеров:
1. Можете немножко рассказать про Apium\Selenium\Cucumber? Хотелось бы иметь представление о том как вообще выглядят сценарии автотестов, как реализуются и пр.

1) Почему все названия классов отвечающих за элементы
графического дизайна начинаются на букву J?
2) Как научится после построения алгоритма в голове переложить
 его на код?
3) Нужно ли записаться на Java 2, если я прохожу обучение
на Тестировщика? Ну, в смысле, нужно ли это будет мне на будущей
работе или нет?

Почему в программе 7 урока мы обрабатывали исключения через throw, а не через try, catch?
Если нам нужно найти слово в тексте (как в предпоследнем ДЗ) лучше всегда переводить строку в последовательность байтов или есть удобные средства поиска слова в том виде, в каком его воспринимает человек?
Я правильно понимаю, что абстрактный метод нужен для удобства? То есть мы можем написать его в классе-родителе и затем уже переопределить в наследниках? Если класс абстрактный – по идее его наследники должны быть такими же, но у нас в примере с Animal и Cat было не так (Cat был обычным), почему?
Зачем мы используем слово final при объявлении некоторых символьных констант, если мы и так их нигде не изменяем в программе?
Имеется ли генератор случайных символов (например букв) как встроенный метод по аналогии с генератором случайных чисел? Вряд ли это имеет практическое применение, но просто интересно =)
Какие книги стоит почитать по алгоритмам?

-Наследоваться можно только от одного класса-родителя?
-В Java куча методов и пакетов встроенных. Каков подход вообще в их изучении? Все выучить невозможно. Вникать тогда, когда потребуется на практике или нужно заранее?
-Почему в тестировании ПО используется преимущественно Java?
-Ухожу со старой работы, хочу устроиться тестировщиком. Что посоветуете перед собеседованиями?
-Достаточно ли пройти 1-2-3 уровня Java, чтобы потом устроиться на работу Java-программистом? На какую зп можно рассчитывать?
-Меня лично пугает огромное количество технологий, связанных с IT. Куча фреймворков, языков, инструментов, сервисов. Чем больше узнешь, тем меньше уверенности в себе) Как не утонуть в куче технологий?

Как запоминать и понимать алгоритмы?

Что понятно:
- понятна логика действий
- понятны объяснения процессов
- понятны задачи, решаемые тем или иным действием

На чем застреваю:
- функционал Idea
- синтаксис языка
- употребление отдельных операторов (get, set - почему, в каких случаях употребляются? пК примеру, почему "setVisible", а не просто "Visible"?
- не смогу повторить на другом задании структуру классов. В разобранном примере понятно, но если "XoGUI" понятно почему отдельно, то "Settings" и "Map" в другой задаче легко перемешаются.....
- незнание методов не позволяет оптимально построить решение и даже подсмотрев, не уверен, что смогу правильно применить незнакомое
действие
- самая большая проблема - невозможность уделить достаточное время. Это не оправдание, это беда...

Тем более, что начальный этап требует вникать в те моменты, которые при наличии какого-то опыта проходят на автомате. Сейчас же, по 2-3 раза повторно прослушиваю лекции, чтобы вникнуть в некоторые вопросы.

2. В ДЗ №4 у меня был метод SalaryUp(int age, int raise) в классе Employee и Вы написали комментарий, что это не логично, что сотрудник внутри себя решает, что ему должны поднять з/п. Но ведь он не решает - возраст и сумма передаются извне. Кроме того, внутри класса есть метод setSalary, который также устанавливает з/п, новый метод ведь не особо от него отличается по смыслу?
3. В 3 четверти будет автоматизация тестирования, в каком направлении двигаться в самообразовании по Java, чтобы подготовиться (может можно выделить какие-то темы, которые нужны больше других)?

Окно не переписывала, но кое-какие параметры ради интереса поменяла, при этом возник вопрос: а возможно ли задать размер кнопок "Exit" и "Start"?

у меня большие проблемы с алгоритмизацией: может, есть какие-то источники, начитанность которых поможет с этим вопросом?
ну и второй момент, на каком уровне java нужна qa-специалисту? желателно ли или нужно ли идти на java2?

В основном вопросы по последней лекции: хотелось бы получше узнать про базовые элементы управления и обработку событий, работу с графикой. Подробнее JPanel .
вы говорили про какие-то ограничения, которые нужно знать при работе с нерегулируемыми массивами.
где можно потренироваться с задачами на java.

Что такое метод?
Что такое сущность?
Что такое класс?
Что такое объект?
Какой уровень знаний в Java требуется для тестировщика?

* 2. Покажите на практике составление и прохождение юнит-теста?


* */
